"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.optionToString = exports.optionToObject = exports.applyOperationOptions = void 0;
const micromustache_1 = require("micromustache");
const parse_json_1 = require("./parse-json");
function resolveFn(path, scope) {
    if (!scope)
        return undefined;
    const value = (0, micromustache_1.get)(scope, path);
    return typeof value === 'object' ? JSON.stringify(value) : value;
}
function renderMustache(item, scope) {
    if (typeof item === 'string') {
        return (0, micromustache_1.renderFn)(item, resolveFn, scope, { explicit: true });
    }
    else if (Array.isArray(item)) {
        return item.map((element) => renderMustache(element, scope));
    }
    else if (typeof item === 'object' && item !== null) {
        return Object.fromEntries(Object.entries(item).map(([key, value]) => [key, renderMustache(value, scope)]));
    }
    else {
        return item;
    }
}
function applyOperationOptions(options, data) {
    return Object.fromEntries(Object.entries(options).map(([key, value]) => {
        if (typeof value === 'string') {
            const single = value.match(/^\{\{\s*([^}\s]+)\s*\}\}$/);
            if (single !== null) {
                return [key, (0, micromustache_1.get)(data, single[1])];
            }
        }
        return [key, renderMustache(value, data)];
    }));
}
exports.applyOperationOptions = applyOperationOptions;
function optionToObject(option) {
    return typeof option === 'string' ? (0, parse_json_1.parseJSON)(option) : option;
}
exports.optionToObject = optionToObject;
function optionToString(option) {
    return typeof option === 'object' ? JSON.stringify(option) : String(option);
}
exports.optionToString = optionToString;
